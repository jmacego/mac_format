#!/usr/bin/env ruby 

# MAC address formats by device:

# Most Linux distros: done
# lowercase, colons. 0c:c4:7a:1f:02:a4 

# ScreenOS Firewall: done
# Lowercase, no symbols. 0cc47aae39f5

# Junos Firewall: done
# Same as Linux standard.

# MRV: done
# Same as Linux standard.

# Dell:
# Same as Linux standard.

# HP Switch:
# lowercase, hyphenated. 0cc47a-ae39f5

# Brocade TurboIron/MLX/ICX/CER, etc:
# lowercase, dots. d4ae.52c6.aeec 

require 'docopt'
# system('clear')

# Create heredoc for Docopt parser.
doc = <<DOCOPT
MAC Address Formatter

Usage:
  #{File.basename(__FILE__)} <mac>
  #{File.basename(__FILE__)} -h | --help
  #{File.basename(__FILE__)} <mac> [-c|--convert <format>] 

Options:
  none          Convert to standard Linux format.
  -h --help     Show this screen.
  -c --convert  Specify a MAC address format. (Linux|Brocade|Cisco|ScreenOS|JunOS|MRV|HP|Dell)

DOCOPT


# strip the crap out of the mac,
# leaving only alphanumerics.
def strip_mac(mac)
  clean = mac.gsub(/[^\d\w]/, '').strip.chomp
  unless clean.length == 12
    puts "#{mac} appears to be an invalid MAC address!"
    exit!
  end
  clean
end

# Convert the MAC to the
# requested format
def convert(mac, format=nil)
  # Recognized formats
  formats = %w(linux screenos junos mrv hp brocade dell cisco)

  linux = mac.scan(/../).join(':')
  hp = mac.scan(/....../).join('-')
  brocade = mac.scan(/..../).join('.')
  if format
    # validate passed format
    unless formats.include?(format)
      puts "Unknown format: #{format}"
      puts "Available formats: #{formats}"
      puts
      exit!
    end

    formatted_mac = case format
    when "linux", "junos", "mrv", "dell"
      linux
    when "screenos"
      mac # already formatted.
    when "hp"
      hp
    when "brocade", "cisco"
      brocade
    end

  else
    formatted_mac = "\nLinux/JunOS/MRV/Dell:  #{linux}\n"
    formatted_mac << "ScreenOS:              #{mac}\n"
    formatted_mac << "HP:                    #{hp}\n"
    formatted_mac << "Brocade/Cisco:         #{brocade}"
  end
  formatted_mac
end



########### Start doing stuff. ###########
begin
  # parse args.
  dict = Docopt::docopt(doc) 
  format = dict["<format>"].strip.chomp.downcase if dict["<format>"]
  # validate the mac address.
  clean_mac = strip_mac(dict['<mac>'])
  # convert to the desired format.
  if dict["--convert"]
    converted = convert(clean_mac, format)  
  else
    converted = convert(clean_mac)
  end
  
  puts converted
  puts
rescue Docopt::Exit => e
  puts e.message  
end

exit
