#!/usr/bin/ruby

# Check for docopt gem.
gem_status = `gem list | grep docopt`

if gem_status.length == 0
  puts "The Docopt gem does not appear to be installed, which this app requires."
  puts "You can install it by running the command 'sudo gem install docopt'"
  puts "If you're using a Ruby version manager like RVM you may not want to use sudo."
  puts "If you don't know what that means, it likely doesn't apply to you and you can run the command as-is."
  puts "More info about Docopt can be found here: http://docopt.org/\n\n"
  exit!
end

require 'docopt'
require 'json'
require 'open-uri'

# Create heredoc for Docopt parser.
doc = <<DOCOPT
MAC Address Formatter

Usage:
  #{File.basename(__FILE__)} <mac>
  #{File.basename(__FILE__)} -l <mac>
  #{File.basename(__FILE__)} -h | --help
  #{File.basename(__FILE__)} <mac> [-c|--convert <format>] 

Options:
  none          Show MAC in all known formats.
  -h --help     Show this screen.
  -c --convert  Specify a MAC address format. (Linux|Brocade|Cisco|ScreenOS|JunOS|MRV|HP|Dell|Windows)
  -l            Perform a vendor lookup on the given MAC address.

DOCOPT


# Validate the mac address.
def valid_mac?(mac)
  valid_chars = "1234567890abcdef"
  return false unless mac.length == 12 # too short.
  mac.split('').each { |c| return false unless valid_chars.include? c } # invalid chars.
  true # yay.
end


# strip the crap out of the mac,
# leaving only alphanumerics. 
def strip_mac(mac)
  mac.gsub(/[^\d\w]/, '').strip.chomp.downcase
end

# Convert the MAC to the
# requested format
def convert(mac, format=nil)
  # Recognized formats
  formats = %w(linux screenos junos mrv hp brocade dell cisco windows)

  linux = mac.scan(/../).join(':')
  windoze = mac.scan(/../).join('-')
  hp = mac.scan(/....../).join('-')
  brocade = mac.scan(/..../).join('.')
  if format
    # validate passed format
    unless formats.include?(format)
      puts "Unknown format: #{format}"
      puts "Available formats: #{formats}"
      puts
      exit!
    end

    formatted_mac = case format
    when "linux", "junos", "mrv", "dell"
      linux
    when "screenos"
      mac # already formatted.
    when "hp"
      hp
    when "brocade", "cisco"
      brocade
    when "windows"
        windoze
    end

  else
    formatted_mac = "\nLinux/JunOS/MRV/Dell:  #{linux}\n"
    formatted_mac << "Windows:               #{windoze}\n"
    formatted_mac << "ScreenOS:              #{mac}\n"
    formatted_mac << "HP:                    #{hp}\n"
    formatted_mac << "Brocade/Cisco:         #{brocade}"
  end
  formatted_mac
end


# OUI Lookup
def lookup_vendor(mac)
  api_response = open("http://mac2vendor.copypaste.at/api/v2/mac/#{mac}").read
  mac_info = JSON.parse(api_response)
  if mac_info['error']
    "Unknown Vendor"
  else
    mac_info['data']['vendor']
  end
end


########### Start doing stuff. ###########
begin
  # parse args.
  dict = Docopt::docopt(doc) 
  format = dict["<format>"].strip.chomp.downcase if dict["<format>"]

  # clean the mac.
  clean_mac = strip_mac(dict['<mac>'])

  # validate it.
  unless valid_mac?(clean_mac)
    puts "\"#{clean_mac}\" appears to be an invalid MAC address!"
    exit
  end

  if dict["-l"]
    # lookup requested. Don't convert anything.
    puts lookup_vendor(clean_mac)
  else
  # convert to the desired format.
    if dict["--convert"]
      puts convert(clean_mac, format).strip.chomp
    else
      puts convert(clean_mac).strip.chomp
    end  
  end

rescue Docopt::Exit => e
  puts e.message  
end

exit
